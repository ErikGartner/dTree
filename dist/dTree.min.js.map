{"version":3,"sources":["dTree.min.js","dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","DEBUG_LEVEL","debug","allNodes","_flatten","visibleNodes","_","filter","n","hidden","nodeSize","callbacks","nodeWidth","textRenderer","value","width","margin","left","right","height","top","bottom","zoom","d3","scaleExtent","on","svg","attr","event","transform","translate","select","append","call","tree","separation","a","b","data","_update","source","treenodes","links","_linkSiblings","selectAll","enter","l","noParent","styles","linage","_elbow","nodes","descendants","marriage","bind","_siblingLine","d","x","cWidth","y","cHeight","id","html","nodeRenderer","name","extra","textClass","nodeClick","recurse","node","children","forEach","push","ny","linedata","fun","line","curve","curveStepAfter","start","v","end","marriageId","marriageNode","find","get","nodeHeight","number","maxHeight","tmpSvg","document","createElement","body","appendChild","map","container","setAttribute","style","visibility","maxWidth","text","innerHTML","offsetHeight","removeChild","Math","max","nodeClass","msg","console","log","VERSION","init","options","arguments","undefined","defaultsDeep","_nodeRenderer","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","_preprocess","treeBuilder","create","reconstructTree","person","parent","class","depthOffset","pushNode","_sortPersons","child","_sortMarriages","marriages","index","m","sp","spouse","hierarchy","persons","sort","Array","isArray","marriageA","marriageB"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function (n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes, opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var zoom = d3.zoom().scaleExtent([0.1, 10]).on('zoom', function () {\n          svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n        });\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height).call(zoom).append('g').attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n        // Compute the layout.\n        this.tree = d3.tree().nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.data.hidden || b.data.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var treenodes = this.tree(source);\n        var links = treenodes.links();\n\n        // Create the link lines.\n        this._linkSiblings(); //  I moved this line before _elbow() for Single parent support\n        this.svg.selectAll('.link').data(links).enter()\n        // filter links with no parents to prevent empty nodes\n        .filter(function (l) {\n          return !l.target.data.noParent;\n        }).append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(treenodes.descendants()).enter();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', _.bind(this._siblingLine, this));\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').filter(function (d) {\n          return d.data.hidden ? false : true;\n        }).attr('x', function (d) {\n          return d.x - d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y - d.cHeight / 2 + 'px';\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          return opts.callbacks.nodeRenderer(d.data.name, d.x, d.y, nodeSize[0], nodeSize[1], d.data.extra, d.data.id, d.data['class'], d.data.textClass, opts.callbacks.textRenderer);\n        }).on('click', function (d) {\n          if (d.data.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.data.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.data.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.data.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n\n          var marriageId = start[0].data.marriageNode != null ? start[0].data.marriageNode.id : end[0].data.marriageNode.id;\n          var marriageNode = allNodes.find(function (n) {\n            return n.data.id == marriageId;\n          });\n          d.source.marriageNode = marriageNode;\n          d.target.marriageNode = marriageNode;\n\n          if (_.get(end[0].data, 'hidden', false)) {\n            // Hide horizontal line for hidden spouse\n            d.target.x = start[0].x;\n            d.target.y = start[0].y;\n            marriageNode.x = start[0].x;\n            marriageNode.y = start[0].y;\n          }\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n        var nodeWidth = this.nodeSize[0];\n        var nodeHeight = this.nodeSize[1];\n\n        // Not first marriage\n        if (d.number > 0) {\n          ny -= nodeHeight * 8 / 10;\n        }\n\n        var linedata = d.source.x === d.target.x && d.source.y === d.target.y ? [] : // If spouse is hidden\n        [{ // regular case\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }], [{\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        var tmpSvg = document.createElement('svg');\n        document.body.appendChild(tmpSvg);\n\n        _.map(nodes, function (n) {\n          var container = document.createElement('div');\n          container.setAttribute('class', n.data['class']);\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\n          container.innerHTML = text;\n\n          tmpSvg.appendChild(container);\n          var height = container.offsetHeight;\n          tmpSvg.removeChild(container);\n\n          maxHeight = Math.max(maxHeight, height);\n          n.cHeight = height;\n          if (n.data.hidden) {\n            n.cWidth = 0;\n          } else {\n            n.cWidth = width;\n          }\n        });\n        document.body.removeChild(tmpSvg);\n\n        return [width, maxHeight];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '2.0.2',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          'class': person['class'] ? person['class'] : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        parent.children.push(node);\n\n        //sort marriages\n        dTree._sortMarriages(person.marriages, opts);\n\n        // go through marriage\n        _.forEach(person.marriages, function (marriage, index) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: marriage.extra\n          };\n\n          var sp = marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: _.get(marriage.spouse, 'hidden', false),\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            'class': sp['class'] ? sp['class'] : opts.styles.node,\n            extra: sp.extra,\n            marriageNode: m\n          };\n\n          parent.children.push(m, spouse);\n\n          dTree._sortPersons(marriage.children, opts);\n          _.forEach(marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            },\n            number: index\n          });\n        });\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: d3.hierarchy(root),\n        siblings: siblings\n      };\n    },\n\n    _sortPersons: function _sortPersons(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function (a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    },\n\n    _sortMarriages: function _sortMarriages(marriages, opts) {\n      if (marriages != undefined && Array.isArray(marriages)) {\n        marriages.sort(function (marriageA, marriageB) {\n          var a = marriageA.spouse;\n          var b = marriageB.spouse;\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return marriages;\n    }\n\n  };\n\n  return dTree;\n});\n//# sourceMappingURL=dTree.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.dTree = factory());\n}(this, (function () { 'use strict';\n\nclass TreeBuilder {\n\n  constructor(root, siblings, opts) {\n    TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n    this.root = root;\n    this.siblings = siblings;\n    this.opts = opts;\n\n    // flatten nodes\n    this.allNodes = this._flatten(this.root);\n\n    // Calculate node size\n    let visibleNodes = _.filter(this.allNodes, function(n) {\n      return !n.hidden;\n    });\n    this.nodeSize = opts.callbacks.nodeSize(visibleNodes,\n      opts.nodeWidth, opts.callbacks.textRenderer);\n  }\n\n  create() {\n\n    let opts = this.opts;\n    let allNodes = this.allNodes;\n    let nodeSize = this.nodeSize;\n\n    let width = opts.width + opts.margin.left + opts.margin.right;\n    let height = opts.height + opts.margin.top + opts.margin.bottom;\n\n    let zoom = d3.zoom()\n      .scaleExtent([0.1, 10])\n      .on('zoom', function() {\n        svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n      });\n\n    //make an SVG\n    let svg = this.svg = d3.select(opts.target)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .call(zoom)\n      .append('g')\n      .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n    // Compute the layout.\n    this.tree = d3.tree()\n      .nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\n\n    this.tree.separation(function separation(a, b) {\n      if (a.data.hidden || b.data.hidden) {\n        return 0.3;\n      } else {\n        return 0.6;\n      }\n    });\n\n    this._update(this.root);\n\n  }\n\n  _update(source) {\n\n    let opts = this.opts;\n    let allNodes = this.allNodes;\n    let nodeSize = this.nodeSize;\n\n    let treenodes = this.tree(source);\n    let links = treenodes.links();\n\n    // Create the link lines.\n    this._linkSiblings(); //  I moved this line before _elbow() for Single parent support\n    this.svg.selectAll('.link')\n      .data(links)\n      .enter()\n      // filter links with no parents to prevent empty nodes\n      .filter(function(l) {\n        return !l.target.data.noParent;\n      })\n      .append('path')\n      .attr('class', opts.styles.linage)\n      .attr('d', this._elbow);\n\n    let nodes = this.svg.selectAll('.node')\n      .data(treenodes.descendants())\n      .enter();\n\n    // Draw siblings (marriage)\n    this.svg.selectAll('.sibling')\n      .data(this.siblings)\n      .enter()\n      .append('path')\n      .attr('class', opts.styles.marriage)\n      .attr('d', _.bind(this._siblingLine, this));\n\n    // Create the node rectangles.\n    nodes.append('foreignObject')\n      .filter(function(d) {\n        return d.data.hidden ? false : true;\n      })\n      .attr('x', function(d) {\n        return d.x - d.cWidth / 2 + 'px';\n      })\n      .attr('y', function(d) {\n        return d.y - d.cHeight / 2 + 'px';\n      })\n      .attr('width', function(d) {\n        return d.cWidth + 'px';\n      })\n      .attr('height', function(d) {\n        return d.cHeight + 'px';\n      })\n      .attr('id', function(d) {\n        return d.id;\n      })\n      .html(function(d) {\n        return opts.callbacks.nodeRenderer(\n          d.data.name,\n          d.x,\n          d.y,\n          nodeSize[0],\n          nodeSize[1],\n          d.data.extra,\n          d.data.id,\n          d.data.class,\n          d.data.textClass,\n          opts.callbacks.textRenderer);\n      })\n      .on('click', function(d)  {\n        if (d.data.hidden) {\n          return;\n        }\n        opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\n      });\n  }\n\n  _flatten(root) {\n    let n = [];\n    let i = 0;\n\n    function recurse(node) {\n      if (node.children) {\n        node.children.forEach(recurse);\n      }\n      if (!node.id) {\n        node.id = ++i;\n      }\n      n.push(node);\n    }\n    recurse(root);\n    return n;\n  }\n\n  _elbow(d, i) {\n    if (d.target.data.noParent) {\n      return 'M0,0L0,0';\n    }\n    let ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n    let linedata = [{\n      x: d.target.x,\n      y: d.target.y\n    }, {\n      x: d.target.x,\n      y: ny\n    }, {\n      x: d.source.x,\n      y: d.source.y\n    }];\n\n    let fun = d3.line().curve(d3.curveStepAfter)\n      .x(function(d) {\n        return d.x;\n      })\n      .y(function(d) {\n        return d.y;\n      });\n    return fun(linedata);\n  }\n\n  _linkSiblings() {\n\n    let allNodes = this.allNodes;\n\n    _.forEach(this.siblings, function(d) {\n      let start = allNodes.filter(function(v) {\n        return d.source.id == v.data.id;\n      });\n      let end = allNodes.filter(function(v) {\n        return d.target.id == v.data.id;\n      });\n      d.source.x = start[0].x;\n      d.source.y = start[0].y;\n      d.target.x = end[0].x;\n      d.target.y = end[0].y;\n\n      let marriageId = (start[0].data.marriageNode != null ?\n                        start[0].data.marriageNode.id :\n                        end[0].data.marriageNode.id);\n      let marriageNode = allNodes.find(function(n) {\n        return n.data.id == marriageId;\n      });\n      d.source.marriageNode = marriageNode;\n      d.target.marriageNode = marriageNode;\n\n      if (_.get(end[0].data, 'hidden', false)) {\n        // Hide horizontal line for hidden spouse\n        d.target.x = start[0].x;\n        d.target.y = start[0].y;\n        marriageNode.x = start[0].x;\n        marriageNode.y = start[0].y;\n      }\n    });\n\n  }\n\n  _siblingLine(d, i) {\n\n    let ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n    let nodeWidth = this.nodeSize[0];\n    let nodeHeight = this.nodeSize[1];\n\n    // Not first marriage\n    if (d.number > 0) {\n      ny -= nodeHeight * 8 / 10;\n    }\n\n    let linedata =\n      d.source.x === d.target.x && d.source.y === d.target.y ?\n        [] : // If spouse is hidden\n        [{ // regular case\n      x: d.source.x,\n      y: d.source.y\n    }, {\n      x: d.source.x + nodeWidth * 6 / 10,\n      y: d.source.y\n    }, {\n      x: d.source.x + nodeWidth * 6 / 10,\n      y: ny\n    }, {\n      x: d.target.marriageNode.x,\n      y: ny\n    }, {\n      x: d.target.marriageNode.x,\n      y: d.target.y\n    }, {\n      x: d.target.x,\n      y: d.target.y\n    }];\n\n    let fun = d3.line().curve(d3.curveStepAfter)\n      .x(function(d) {\n        return d.x;\n      })\n      .y(function(d) {\n        return d.y;\n      });\n    return fun(linedata);\n  }\n\n  static _nodeSize(nodes, width, textRenderer) {\n    let maxWidth = 0;\n    let maxHeight = 0;\n    let tmpSvg = document.createElement('svg');\n    document.body.appendChild(tmpSvg);\n\n    _.map(nodes, function(n) {\n      let container = document.createElement('div');\n      container.setAttribute('class', n.data.class);\n      container.style.visibility = 'hidden';\n      container.style.maxWidth = width + 'px';\n\n      let text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\n      container.innerHTML = text;\n\n      tmpSvg.appendChild(container);\n      let height = container.offsetHeight;\n      tmpSvg.removeChild(container);\n\n      maxHeight = Math.max(maxHeight, height);\n      n.cHeight = height;\n      if (n.data.hidden) {\n        n.cWidth = 0;\n      } else {\n        n.cWidth = width;\n      }\n    });\n    document.body.removeChild(tmpSvg);\n\n    return [width, maxHeight];\n  }\n\n  static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n    let node = '';\n    node += '<div ';\n    node += 'style=\"height:100%;width:100%;\" ';\n    node += 'class=\"' + nodeClass + '\" ';\n    node += 'id=\"node' + id + '\">\\n';\n    node += textRenderer(name, extra, textClass);\n    node += '</div>';\n    return node;\n  }\n\n  static _textRenderer(name, extra, textClass) {\n    let node = '';\n    node += '<p ';\n    node += 'align=\"center\" ';\n    node += 'class=\"' + textClass + '\">\\n';\n    node += name;\n    node += '</p>\\n';\n    return node;\n  }\n\n  static _debug(msg) {\n    if (TreeBuilder.DEBUG_LEVEL > 0)  {\n      console.log(msg);\n    }\n  }\n\n}\n\nconst dTree = {\n\n  VERSION: '2.0.2',\n\n  init: function(data, options = {}) {\n\n    var opts = _.defaultsDeep(options || {}, {\n      target: '#graph',\n      debug: false,\n      width: 600,\n      height: 600,\n      callbacks: {\n        nodeClick: function(name, extra, id) {},\n        nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n          return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\n            id,nodeClass, textClass, textRenderer);\n        },\n        nodeSize: function(nodes, width, textRenderer) {\n          return TreeBuilder._nodeSize(nodes, width, textRenderer);\n        },\n        nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\n        textRenderer: function(name, extra, textClass) {\n          return TreeBuilder._textRenderer(name, extra, textClass);\n        },\n      },\n      margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      nodeWidth: 100,\n      styles: {\n        node: 'node',\n        linage: 'linage',\n        marriage: 'marriage',\n        text: 'nodeText'\n      }\n    });\n\n    var data = this._preprocess(data, opts);\n    var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n    treeBuilder.create();\n\n  },\n\n  _preprocess: function(data, opts) {\n\n    var siblings = [];\n    var id = 0;\n\n    var root = {\n      name: '',\n      id: id++,\n      hidden: true,\n      children: []\n    };\n\n    var reconstructTree = function(person, parent) {\n\n      // convert to person to d3 node\n      var node = {\n        name: person.name,\n        id: id++,\n        hidden: false,\n        children: [],\n        extra: person.extra,\n        textClass: person.textClass ? person.textClass : opts.styles.text,\n        class: person.class ? person.class : opts.styles.node\n      };\n\n      // hide linages to the hidden root node\n      if (parent == root) {\n        node.noParent = true;\n      }\n\n      // apply depth offset\n      for (var i = 0; i < person.depthOffset; i++) {\n        var pushNode = {\n          name: '',\n          id: id++,\n          hidden: true,\n          children: [],\n          noParent: node.noParent\n        };\n        parent.children.push(pushNode);\n        parent = pushNode;\n      }\n\n      // sort children\n      dTree._sortPersons(person.children, opts);\n\n      // add \"direct\" children\n      _.forEach(person.children, function(child) {\n        reconstructTree(child, node);\n      });\n\n      parent.children.push(node);\n\n      //sort marriages\n      dTree._sortMarriages(person.marriages, opts);\n\n      // go through marriage\n      _.forEach(person.marriages, function(marriage, index) {\n\n        var m = {\n          name: '',\n          id: id++,\n          hidden: true,\n          noParent: true,\n          children: [],\n          extra: marriage.extra\n        };\n\n        var sp = marriage.spouse;\n\n        var spouse = {\n          name: sp.name,\n          id: id++,\n          hidden: _.get(marriage.spouse, 'hidden', false),\n          noParent: true,\n          children: [],\n          textClass: sp.textClass ? sp.textClass : opts.styles.text,\n          class: sp.class ? sp.class : opts.styles.node,\n          extra: sp.extra,\n          marriageNode: m\n        };\n\n        parent.children.push(m, spouse);\n\n        dTree._sortPersons(marriage.children, opts);\n        _.forEach(marriage.children, function(child) {\n          reconstructTree(child, m);\n        });\n\n        siblings.push({\n          source: {\n            id: node.id\n          },\n          target: {\n            id: spouse.id\n          },\n          number: index\n        });\n      });\n\n    };\n\n    _.forEach(data, function(person) {\n      reconstructTree(person, root);\n    });\n\n    return {\n      root: d3.hierarchy(root),\n      siblings: siblings\n    };\n\n  },\n\n  _sortPersons: function(persons, opts) {\n    if (persons != undefined) {\n      persons.sort(function(a, b) {\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n      });\n    }\n    return persons;\n  },\n\n  _sortMarriages: function(marriages, opts) {\n    if (marriages != undefined && Array.isArray(marriages)) {\n      marriages.sort(function(marriageA, marriageB) {\n        var a = marriageA.spouse;\n        var b = marriageB.spouse;\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n      });\n    }\n    return marriages;\n  }\n\n};\n\nreturn dTree;\n\n})));\n"]}